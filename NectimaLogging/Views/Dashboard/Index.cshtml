@model NectimaLogging.Services.Chart.ExceptionChartStart
@{
    ViewData["Title"] = "Index";
}

<div id="dashboard-grid-container">


    <div id="line-container">

        <canvas id="line-chart"></canvas>

        <form id="prev-btn" method="post" asp-action="Index" role="form">

            <input id="week" type="submit" value="prev" />
            <input name="isPrev" type="hidden" value="true" checked />
            <input id="prev-week" name="prevWeek" type="hidden" value="@Model.MyCounter" />



        </form>
        <form id="next-btn" method="post" asp-action="Index" role="form">

            <input type="submit" value="next" />
            <input name="isNext" type="hidden" value="true" checked />
            <input id="prev-week" name="prevWeek" type="hidden" value="@Model.MyCounter" />
        </form>
    </div>


    <div id="doughnut-container">
        <canvas id="doughnut-chart"></canvas>
    </div>

    <div id="bar-container">
        <canvas id="bar-chart"></canvas>
    </div>

    <div id="bubble-container">
        <canvas id="bubble-chart"></canvas>
    </div>

    <p></p>

    </div>
    <script >

        @*let myData1 = @Html.Raw(Json.Serialize(@Model.ExSum().ElementAt(1).AverageMonthPrint));*@
  
        let myProcentData = @Html.Raw(Json.Serialize(@Model.GetExProcentDay))
        let myProcentDays = @Html.Raw(Json.Serialize(Model.GetDays));
      new Chart(document.getElementById("bubble-chart"), {
          type: 'horizontalBar',
        data: {
            labels: myProcentDays,
            datasets: [{
                data: myProcentData,
                label: "Exceptions in %",
                borderColor: "#3e95cd",
                backgroundColor:
                    ['#5DB5A4', '#F57A62', '#40152A',
                        '#1F518E', 'F0D01F', '#9C4368','#9FA600'], 
                fill: false
            }
            ]
        },
        options: {
            title: {
                display: true,
                text: '@Model.StartDate - @Model.EndDate'
            }
        }
    });
      




        let myLabel = @Html.Raw(Json.Serialize(@Model.ThreadName()));
        let myData = @Html.Raw(Json.Serialize(@Model.ThreadCount()));

        function getRandomColor() {
            let letters = '0123456789ABCDEF'.split('');
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        };

        function randomrgba() {
            var o = Math.round, r = Math.random, s = 255;
            return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';
        };

        function test() {
            var k = [];
            for (var i = 0; i < myData.length; i++) {
                k.push(getRandomColor());
            }
            return k;

        }


    new Chart(document.getElementById("bar-chart"), {
        type: 'bar',
        data: {

            labels: myLabel,
            datasets: [
                {
                    label: "amount",
                    data: myData,
                    backgroundColor: test(),
                    
                }
            ]
        },
        options: {
            legend: { display: false },
            title: {
                display: true,
                text: 'Amount of logs on threads'
            }, scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "Logs"
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: "THREADS"
                    }
                }]
            }
        }
    });


        var levelCanvas = document.getElementById("doughnut-chart");

        var levelData = {
            labels: [
                "Debug",
                "Error",
                "Fatal",
                "Info",
                "Off",
                "Warn"
            ],
            datasets: [
                {
                    data: ['@ViewData["Debug"]', '@ViewData["Error"]', '@ViewData["Fatal"]',
                        '@ViewData["Info"]', '@ViewData["Off"]','@ViewData["Warn"]'],
                    backgroundColor: [
                        "#F3525C",
                        "#00674C",
                        "#95B23A",
                        "#FCCE44",
                        "#F57F4F"
                    ]
                }]
        };

        var pieChart = new Chart(levelCanvas, {
            type: 'doughnut',
            data: levelData
        });


    new Chart(document.getElementById("line-chart"), {
        type: 'line',
        data: {
            labels: ['@Model.Create().ElementAt(0).Date', '@Model.Create().ElementAt(1).Date', '@Model.Create().ElementAt(2).Date', '@Model.Create().ElementAt(3).Date',
                    '@Model.Create().ElementAt(4).Date','@Model.Create().ElementAt(5).Date','@Model.Create().ElementAt(6).Date','@Model.Create().ElementAt(7).Date',],
            datasets: [{
                data: ['@Model.Create().ElementAt(0).AmountOfExceptions','@Model.Create().ElementAt(1).AmountOfExceptions','@Model.Create().ElementAt(2).AmountOfExceptions',
                        '@Model.Create().ElementAt(3).AmountOfExceptions','@Model.Create().ElementAt(4).AmountOfExceptions','@Model.Create().ElementAt(5).AmountOfExceptions',
                   '@Model.Create().ElementAt(6).AmountOfExceptions','@Model.Create().ElementAt(7).AmountOfExceptions',],
                label: "Exceptions",
                borderColor: "#3e95cd",
                fill: false
            }
            ]
        },
        options: {
            title: {
                display: true,
                text: 'Amount of Exceptions'
            }
        }
    });
    </script>
